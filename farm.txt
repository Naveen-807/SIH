You are helping me build a web application called Faarm Pool – “Uber for Farmers”, where farmers can rent/share farm machinery and book operators.
Build this as a scalable full-stack application with the following requirements:

🎯 Core Requirements (MVP – Phase 1)

Authentication

OTP-based login with mobile numbers (no password).

Multi-language support (English + regional).

Voice-first navigation (for low-literacy users).

Equipment Marketplace

Farmers can list machinery (tractor, harvester, tools) with photos, rent price, availability calendar, and location.

Other farmers can search/filter machines by type, price, and location.

Booking system with instant booking or owner confirmation.

Payments

Integrate UPI / Razorpay for online payments.

Option for Cash on Delivery.

Escrow system: Hold payment until rental is completed.

Dashboards

Owner Dashboard: Manage equipment, track bookings, see earnings.

Renter Dashboard: See bookings, history, payments.

🌾 Phase 2 Features (Trust & Adoption)

Digital KYC for machine owners.

Smart pricing suggestions based on demand.

Rental bundles (machine + tools + operator).

In-app wallet & credit option (pay later after harvest).

In-app chat & voice call (with number masking).

Location-based filtering + distance cost calculator.

Multi-user accounts for farmer groups (co-ops).

🚜 Phase 3 Features (Advanced)

Operator Booking System – Farmers can book machine + driver.

Insurance add-ons (damage cover).

Ratings & reviews for machines and operators.

Community features (forums, crop advice, weather alerts).

AI-powered recommendations:

Suggest best equipment for a crop.

Predict demand in peak seasons.

Equipment health monitoring (manual logs first, later IoT).

Analytics Dashboard for owners (income trends, machine utilization).

🌍 Future Ecosystem (Optional Later)

Agri-input marketplace (seeds, fertilizers).

Logistics integration (truck rentals).

Weather + yield prediction alerts.

Bank loans & microfinance integration.

Rural job marketplace (operators, mechanics).

🛠️ Tech Stack Suggestions

Frontend: React (with PWA support for offline usage).

Backend: Node.js (Express) or Django/Flask.

Database: PostgreSQL (relational, structured) or MongoDB (flexible).

Auth & OTP: Firebase Auth or Twilio.

Payments: Razorpay / Paytm / Stripe.

Hosting: AWS / GCP / Azure.

👉 Instruction for Copilot:
Generate clean, modular, production-ready code following best practices (scalable architecture, reusable components, REST/GraphQL APIs, secure authentication, error handling).
Each feature should be developed as a separate module/service for easy expansion.
Provide code for both frontend (React) and backend (API, DB models, auth, payments) as needed.